#version 450

#define tfxINVALID 0xFFFFFFFF
#define tfxReverseAnimationFlag 8192
const float one_div_511 = 1.0 / 511.0;
const float unorm_multiplier = 1.0 / 65535.0;
const float pow_2_22 = 1.0 / pow(2.0, 22);
const float size_max_value = 256.0 / 32767.0;
const float size_max_divisor = 32767.0 / 256.0;
const float handle_max_value = 128.0 / 32767.0;
const float intensity_max_value = 128.0 / 32767.0;
const float intensity_max_divisor = 32767.0 / 128.0;

//Sprite struct that gets passed to the vertex shader. This is the only struct that gets written to.
struct Sprite {		//56 bytes + padding to 64
	vec4 position;						//The position of the billboard
	vec3 rotations;				        //Rotations of the billboard with stretch in w
	uint alignment;						//normalised alignment vector 2 floats packed into 16bits or 3 8bit floats for 3d
	uvec2 size_handle;					//Size of the sprite in pixels and the handle packed into a u64 (4 16bit floats)
	uint intensity_life;				//Multiplier for the color and life of particle
	uint curved_alpha;					//Sharpness and dissolve amount value for fading the image 2 16bit floats packed
	uint indexes;						//[color ramp y index, color ramp texture array index, capture flag, image data index (1 bit << 15), billboard alignment (2 bits << 13), image data index max 8191 images]
	uint captured_index;				//Index to the sprite in the buffer from the previous frame for interpolationP
	ivec2 padding;
};

//Contains all of the pre-recorded sprites for all effects
struct SpriteData {		//60 bytes + padding to 64
	vec4 position;						//The position of the billboard
	vec3 rotations;				        //Rotations of the billboard with stretch in w
	uint alignment;						//normalised alignment vector 2 floats packed into 16bits or 3 8bit floats for 3d
	uvec2 size_handle;					//Size of the sprite in pixels and the handle packed into a u64 (4 16bit floats)
	uint intensity_life;				//Multiplier for the color and life of particle
	uint curved_alpha;					//Sharpness and dissolve amount value for fading the image 2 16bit floats packed
	uint indexes;						//[color ramp y index, color ramp texture array index, capture flag, image data index (1 bit << 15), billboard alignment (2 bits << 13), image data index max 8191 images]
	uint captured_index;				//Index to the sprite in the buffer from the previous frame for interpolationP
	uint property_index_lerp_offset;	//UNorm lerp offset in FFFF and the property index in FFFF0000
	uint padding;
};

//Contains each animation instance with data that the compute shader uses to position the sprites and figure out which is the current frame that's playing.
struct AnimationInstance {
	vec3 position;					//position that the instance should be played at
	float scale;					//Overal scale of the effect
	uint sprite_count;				//The number of sprites to be drawn
	uint frame_count;				//The number of frames in the animation
	uint offset_into_sprite_data;	//The starting ofset in the buffer that contains all the sprite data
	uint info_index;				//Index into the effect_animation_info storage map to get at the frame meta
	float current_time;				//Current point of time in the animation
	float animation_time;			//Total time that the animation lasts for
	float tween;					//The point time within the frame (0..1)
	uint flags;						//Flags associated with the instance
};

//Contains image data to populate sprites with uv coords and texture array index if it's being used.
struct ComputeImageData {
	vec4 uv;
	uvec2 uv_packed;
	vec2 image_size;
	uint texture_array_index;
	float animation_frames;
	float padding[2];
};

//Emitter properties, currently only need the handle of the sprite
struct EmitterProperties {
	vec2 handle;
	uint handle_packed;
	uint flags;
	uint start_frame_index;
	float animation_frames;
	float padding[2];
};

//The size of each local group, ie., how many sprites are processed by each compute thread
layout (local_size_x = 128) in;

//Bindings for all the buffers being used
layout (std430, binding = 0) readonly buffer InSpriteData {
   SpriteData sprite_data[ ];
};

layout (std430, binding = 1) readonly buffer InOffsets {
   uint offsets[ ];
};

layout (std430, binding = 2) readonly buffer InAnimationInstances {
   AnimationInstance instances[ ];
};

layout (std430, binding = 3) readonly buffer InImageData {
   ComputeImageData image_data[ ];
};

layout (std430, binding = 4) readonly buffer InEmitterProperties {
   EmitterProperties emitter_properties[ ];
};

layout (std430, binding = 5) buffer OutInstances {
	Sprite sprites[ ]; 
};

//Push constants
layout(push_constant) uniform compute_push
{
	vec4 parameters;		//Total number of sprites to process in z. Total animation instances in x. y is 1 if any animation instance uses animated shapes
} pc;

vec2 Unpack16bit2SScale(uint packed, float max_value) {
	int x_scaled = int(packed & 0xFFFF);
	int y_scaled = int((packed >> 16) & 0xFFFF);
	vec2 unpacked;
	unpacked.x = float(x_scaled * max_value);
	unpacked.y = float(y_scaled * max_value);
	return unpacked;
}

//Packing functions to pack a vec3 into an snorm 10bit uint
//Replit came in very useful for these functions (for the packing function, and the sign preserving right shift)
//Unfortunately glsl/gpus don't have a way to preserve the sign when right shifting hence the extra code required
//inside the float conversion
//Note: profiling required here to test if saving the space is actually worth it
//Note2: Due to Mac not having 10bit packing this function is no longer used, builtin unpackSnorm4x8 is now used instead.
vec3 UnPack10bit(in uint packed) {
	vec3 result;
	int x = int(packed << 2);
	int y = int(packed << 12);
	int z = int(packed << 22);
	result.x = float(sign(x) * floor(abs(x) * pow_2_22)) * one_div_511;
	result.y = float(sign(y) * floor(abs(y) * pow_2_22)) * one_div_511;
	result.z = float(sign(z) * floor(abs(z) * pow_2_22)) * one_div_511;
	return result;
}

uint Pack10bit(in vec3 v) {
    ivec3 packed = ivec3(v * 511.0 + 0.5);
    return uint((packed.x & 1023) << 20 | (packed.y & 1023) << 10 | (packed.z & 1023));
}

void main()
{	
    uint index = gl_GlobalInvocationID.x;
	uint sprite_count = uint(pc.parameters.z);

	// Don't try to write beyond position count
    if (index >= pc.parameters.z) 
		return;	

	uint instance_index = 0;
	uint sprite_index_offset = 0;

	//We have to loop through the offsets buffer and find where we are in the animation instances buffer.
	//Currently don't know how to do this faster. Obviously it's slower the more instances there are
	for(int i = 0 ; i < int(pc.parameters.x); ++i) {
		instance_index += uint(offsets[instance_index] <= index);
	}

	//Get the index offset into the sprite data that we should reference from
	sprite_index_offset = instance_index == 0 ? 0 : offsets[instance_index - 1];

	//Calculate the frame time. At frame 0 this is a value between 0 and 1, frame 1 this is between 1 and 2 and so on
	float frame_time = (instances[instance_index].current_time / instances[instance_index].animation_time) * float(instances[instance_index].frame_count);
	//Calculate the lerp value (0..1)
	float lerp = frame_time - float(floor(frame_time));

	//Calculate the current sprite index that we should read from
	uint sprite_data_index = (index - sprite_index_offset) + instances[instance_index].offset_into_sprite_data;
	uint captured_index = sprite_data[sprite_data_index].captured_index;
	//If the captured index is invalid then set it to the current sprite index. The reason why it would be invalid is if this is the first frame 
	//that the particle spawned and there is no previous frame to interpolate with
	if (captured_index == tfxINVALID) captured_index = sprite_data_index;

	//We set the scale of the sprite to 0 if it hasn't actually spawned yet. The lerp_offset in the sprite data determines how far into the frame
	//before the sprite actually spawns. We also set it to 0 if the captured_index equals the sprite index. lerp_offset will always be 1 if the particle Sprite
	//has been spawned for 1 or more frames.
	float lerp_offset = float(sprite_data[captured_index].property_index_lerp_offset & 0xFFFF) * unorm_multiplier;
	float spawn_scale = ((lerp_offset >= (1 - lerp)) && (captured_index != sprite_data_index)) ? 1 : 0;

	//Do all of the interpolation for transfrom, intensity etc.
	//If you feel that you can get away with not interpolating some of the data then you could optimise some of these out but it will largely
	//depend on how much you compress the frames
	vec3 lerped_position =		mix(sprite_data[captured_index].position.xyz, sprite_data[sprite_data_index].position.xyz, lerp) * instances[instance_index].scale;
	vec3 lerped_rotation =		mix(sprite_data[captured_index].rotations, sprite_data[sprite_data_index].rotations, lerp);
	vec2 scale =				Unpack16bit2SScale(sprite_data[sprite_data_index].size_handle.x, size_max_value);
	vec2 captured_scale =		Unpack16bit2SScale(sprite_data[captured_index].size_handle.x, size_max_value);
	vec2 lerped_scale =			mix(captured_scale, scale, lerp) * spawn_scale * instances[instance_index].scale;
	vec3 alignment =			unpackSnorm4x8(sprite_data[sprite_data_index].alignment).xyz;
	vec3 captured_alignment =	unpackSnorm4x8(sprite_data[captured_index].alignment).xyz;
	vec3 lerped_alignment =		mix(captured_alignment, alignment, lerp);
	float lerped_stretch =		mix(sprite_data[captured_index].position.w, sprite_data[sprite_data_index].position.w, lerp);
	uint property_index = (sprite_data[sprite_data_index].property_index_lerp_offset & 0xFFFF0000) >> 16;
	uint lerped_frame = emitter_properties[property_index].start_frame_index;
	if(pc.parameters.y != 0) {		//no branching as it will be the same for all groups in shader. 
		//With the if statement here we can only run this if any animation instance uses animated shapes as denoted by the push constant parameter
		//If you're not using any animated shapes then you can optimise this out. This interpolates frames in the shape and has to 
		//take into account the frame wrapping around at the end so there's a bit of extra work involved. 
		float reverse_direction = float((emitter_properties[property_index].flags & tfxReverseAnimationFlag) > 1);
		float current_frame = float(sprite_data[sprite_data_index].indexes & 0x00001FFF);
		float prev_frame = float(sprite_data[captured_index].indexes & 0x00001FFF);
		float frames = emitter_properties[property_index].animation_frames;
		float wrap = (1 - reverse_direction) * float(current_frame < prev_frame);
		float reverse_wrap = reverse_direction * float(prev_frame < current_frame);
		lerped_frame += uint(mod(mix(prev_frame + frames * reverse_wrap, current_frame + frames * wrap, lerp), frames));
		sprites[index].indexes = sprite_data[sprite_data_index].indexes & 0xFFFFE000;
		sprites[index].indexes |= lerped_frame;
	} else {
		sprites[index].indexes = sprite_data[sprite_data_index].indexes + lerped_frame;
	}
	vec2 intensity_life = Unpack16bit2SScale(sprite_data[sprite_data_index].intensity_life, intensity_max_value);
	vec2 captured_intensity_life = Unpack16bit2SScale(sprite_data[captured_index].intensity_life, intensity_max_value);
	float lerped_intensity = mix(captured_intensity_life.x, intensity_life.x, lerp);
	float lerped_life = mix(captured_intensity_life.y, intensity_life.y, lerp);
	vec2 curved_alpha = unpackSnorm2x16(sprite_data[sprite_data_index].curved_alpha);
	vec2 captured_curved_alpha = unpackSnorm2x16(sprite_data[captured_index].curved_alpha);
	vec2 lerped_curved_alpha = mix(captured_curved_alpha, curved_alpha, lerp);

	//Offset the position by the current animation instance position
	lerped_position += instances[instance_index].position;

	//Now load the data into the sprite buffer ready for the vertex buffer
	sprites[index].position = vec4(lerped_position.x, lerped_position.y, lerped_position.z, lerped_stretch);
	sprites[index].rotations = lerped_rotation;
	sprites[index].size_handle.x = (uint(lerped_scale.y * size_max_divisor) << 16) + uint(lerped_scale.x * size_max_divisor);
	sprites[index].size_handle.y = sprite_data[sprite_data_index].size_handle.y;
	sprites[index].intensity_life = (uint(lerped_life * intensity_max_divisor) << 16) + uint(lerped_intensity * intensity_max_divisor);
	sprites[index].alignment = packSnorm4x8(vec4(lerped_alignment, 0));
	sprites[index].curved_alpha = packSnorm2x16(lerped_curved_alpha);
	sprites[index].captured_index = index;

}
