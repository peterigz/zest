#version 450
#define group_size 128

/*
This compute shader takes in a buffer of ribbon segments and builds a vertex and index buffer for consumption by the vertex
shader. The push constant contains data such as the number of individual ribbons and the segment count of each ribbon. All 
ribbons are the same length passed into the push constant as segment_count
*/

struct ribbon_segments {
    vec4 position_and_width;    // xyz = position, w = width                
    uint color;                 //The color tint of the segment
    uint padding[3];            
};

struct ribbon {
    float global_width;         //All segment widths in the ribbon are multipied by this value
    uint start_index;           //The ribbon segment data are ring buffers so this is used to find the correct index into the buffer
};

struct vertex {
    vec4 position;                    
    vec4 uv;
    uint color;
    uint padding[3];
};

//The push constant struct for storing 
layout(push_constant) uniform push_constants
{
    vec4 camera_position;           
    float texture_y_scale;          
    float texture_y_offset;        
    float width_scale_multiplier;   
    uint segment_count;             
    uint tessellation;              
    uint index_offset;              
    uint ribbon_count;              
} pc;

layout (local_size_x = group_size) in;

layout (std430, binding = 0) readonly buffer InRibbonSegments {
    ribbon_segments ribbon_data[];
};

layout (std430, binding = 1) readonly buffer InRibbonInstances {
    ribbon ribbons[];
};

layout (std430, binding = 2) buffer OutVertices {
    vertex vertex_data[];
};

layout (std430, binding = 3) buffer OutIndices {  // Changed binding to 2
    uint index_data[];
};

void main() {    
    uint global_index = gl_GlobalInvocationID.x;
    if (global_index >= pc.segment_count * pc.ribbon_count) return;

    uint ribbon_index = global_index / pc.segment_count;
    //All ribbon segments are in a single array of segments, so we need the offset to the location in the buffer
    //for the current ribbon using the ribbon index
    uint global_offset = ribbon_index * pc.segment_count;
    //Each set of ribbon segments are stored in a ring buffer so we need to find the correct index in to the buffer first by
    //finding the local segment index. Then we use that to find the global segment index using the start index of the
    //segment ring buffer plus the local segment modular with the segment count. finally add on the global index offset
    //to get the correct index we need.
	uint local_segment_index = global_index % pc.segment_count;
	uint global_segment_index = global_offset + (local_segment_index + ribbons[ribbon_index].start_index) % pc.segment_count;
    
    //Now we have the global segment index, we can index into the ribbon_data to get the segment position, width and color
    vec3 current_pos = ribbon_data[global_segment_index].position_and_width.xyz;
    uint current_color = ribbon_data[global_segment_index].color;
    float width = ribbon_data[global_segment_index].position_and_width.w * pc.width_scale_multiplier * ribbons[ribbon_index].global_width;
    
    //Get a normalized vector to the camera so that the vertices can be made to face the camera.
    vec3 to_camera = normalize(pc.camera_position.xyz - current_pos.xyz);

    //Get the ribbon direction vector. Becuase the ribbon segment data are all ring buffers the next and previous indexes need to be properly
    //calculated. If there is a next ribbon segment then use that to get the forward vector, otherwise if we're at the end of the ribbon_count
    //the use the previous ribbon segment.
    uint next_segment_index = global_offset + ((local_segment_index + 1 + ribbons[ribbon_index].start_index) % pc.segment_count);
	uint prev_segment_index = global_offset + ((local_segment_index - 1 + ribbons[ribbon_index].start_index) % pc.segment_count);

	vec3 forward = (local_segment_index < pc.segment_count - 1) 
		? normalize(ribbon_data[next_segment_index].position_and_width.xyz - current_pos)
		: normalize(current_pos - ribbon_data[prev_segment_index].position_and_width.xyz);
    
    //calculate the bisector and use it to get a perpendicular vector from the segment direction and the camera position.
    vec3 bisector = normalize(normalize(to_camera) + forward);
    vec3 right = normalize(cross(forward, bisector));
    
    float ribbon_lerp = float(local_segment_index) / float(pc.segment_count - 1);
    float u_scaled = ribbon_lerp * pc.texture_y_scale;
    
    //Calculate the number of vertices per segment and ribbon. We could optimise this out and put it in the push constants instead. They will
    //be the same across the whole shader.
    uint vertices_per_segment = (pc.tessellation + 1) * 2;
    uint vertices_per_ribbon = pc.segment_count * vertices_per_segment;
    //Calculate the current base offset in to the vertex buffer we're writing to.
    uint vertex_base_index = (ribbon_index * vertices_per_ribbon) + (local_segment_index * vertices_per_segment);

    // Vertex generation
    //We have to do a separate calculation if there are 0 tessellations. No branching here, tessellation will always be the same
    //across the shader. Do separate dispatches for ribbons that have different configurations.
    if(pc.tessellation > 0) {
        // Calculate vertices per segment based on tessellation
        for (uint i = 0; i <= pc.tessellation; i++) {
            float t = float(i) / float(pc.tessellation);            // Interpolation factor
            float width_factor = mix(.5, 0, t);                     // Interpolate from outer to inner
            
            uint vertex_index = vertex_base_index + i;
            vertex_data[vertex_index].position = vec4(current_pos + right * width * width_factor, 1.0);
            vertex_data[vertex_index].uv = vec4(t * 0.5, u_scaled + pc.texture_y_offset, 0.0, ribbon_lerp * 3);
            vertex_data[vertex_index].color = current_color;

            width_factor = mix(0, -0.5, t);                         // Interpolate from inner to outer
            vertex_index = vertex_base_index + (pc.tessellation + 1) + i;
            vertex_data[vertex_index].position = vec4(current_pos + right * width * width_factor, 1.0);
            vertex_data[vertex_index].uv = vec4(0.5 + t * 0.5, u_scaled + pc.texture_y_offset, 1.0, ribbon_lerp * 3);
            vertex_data[vertex_index].color = current_color;
        }

        // Generate indices for tessellated segments
        if (local_segment_index < pc.segment_count - 1) {
            uint indices_per_segment = pc.tessellation * 12; 
            uint indices_per_ribbon = pc.segment_count * indices_per_segment - indices_per_segment;
            uint index_base = pc.index_offset + (ribbon_index * indices_per_ribbon) + (local_segment_index * indices_per_segment);
			uint next_base_vertex = vertex_base_index + vertices_per_segment;
            
            for (uint t = 0; t < pc.tessellation; t++) {
                uint current_quad_index = index_base + (t * 12);

                uint v0 = vertex_base_index + t;
                uint v1 = vertex_base_index + t + 1;
                uint v2 = next_base_vertex + t;
                uint v3 = next_base_vertex + t + 1;
                
                // First triangle
                index_data[current_quad_index + 0] = v0;
                index_data[current_quad_index + 1] = v1;
                index_data[current_quad_index + 2] = v2;
                
                // Second triangle
                index_data[current_quad_index + 3] = v2;
                index_data[current_quad_index + 4] = v1;
                index_data[current_quad_index + 5] = v3;

                uint next_t = pc.tessellation + 1;
				v0 += next_t;
                v1 += next_t;
                v2 += next_t;
                v3 += next_t;

                // First triangle
                index_data[current_quad_index + 6] = v0;
                index_data[current_quad_index + 7] = v1;
                index_data[current_quad_index + 8] = v2;
                
                // Second triangle
                index_data[current_quad_index + 9] = v2;
                index_data[current_quad_index + 10] = v1;
                index_data[current_quad_index + 11] = v3;
            }
        }
    } else {
        // Non-tessellated version
        float width_factor = width * 0.5;
        vertex_data[vertex_base_index].position = vec4(current_pos + right * width_factor, 1.0);
        vertex_data[vertex_base_index].uv = vec4(0.0, u_scaled + pc.texture_y_offset, 0., ribbon_lerp * 3.);
		vertex_data[vertex_base_index].color = current_color;
        vertex_data[vertex_base_index + 1].position = vec4(current_pos - right * width_factor, 1.0);
        vertex_data[vertex_base_index + 1].uv = vec4(1.0, u_scaled + pc.texture_y_offset, 1., ribbon_lerp * 3.);
		vertex_data[vertex_base_index + 1].color = current_color;

        // Generate indices for non-tessellated segments
        if (local_segment_index < pc.segment_count - 1) {
            uint index_base = pc.index_offset + (global_segment_index * 6);
            uint v0 = vertex_base_index;
            uint v1 = vertex_base_index + 2;  // Next segment's first vertex
            uint v2 = vertex_base_index + 1;
            uint v3 = vertex_base_index + 3;  // Next segment's second vertex
            
            // First triangle
            index_data[index_base + 0] = v0;
            index_data[index_base + 1] = v1;
            index_data[index_base + 2] = v2;
            
            // Second triangle
            index_data[index_base + 3] = v2;
            index_data[index_base + 4] = v1;
            index_data[index_base + 5] = v3;
        }
    }
}