#version 450
#define group_size 128

struct ribbon_segments {
    vec4 position_and_width;  // xyz = position, w = width                
    vec4 parameters;
};

struct vertex {
    vec4 position;                    
    vec4 uv;
};

layout(push_constant) uniform camera_push
{
    vec4 position;
    mat4 view;
    float uv_scale;
    float uv_offset;
    float width_scale_multiplier;
    uint segment_count;
    uint tessellation;  // Added tessellation factor
} camera;

layout (local_size_x = group_size) in;

layout (std430, binding = 0) readonly buffer InRibbons {
    ribbon_segments ribbon_data[];
};

layout (std430, binding = 1) buffer OutVertices {
    vertex vertex_data[];
};

void main() {    
    uint global_index = gl_GlobalInvocationID.x;
    if (global_index >= camera.segment_count) return;
    
    vec3 current_pos = ribbon_data[global_index].position_and_width.xyz;
    float width = ribbon_data[global_index].position_and_width.w * camera.width_scale_multiplier;
    
    vec3 to_camera = normalize(camera.position.xyz - current_pos.xyz);
    
    vec3 forward = (global_index < camera.segment_count - 1) 
        ? normalize(ribbon_data[global_index + 1].position_and_width.xyz - current_pos)
        : normalize(current_pos - ribbon_data[global_index - 1].position_and_width.xyz);
    vec3 bisector = normalize(normalize(to_camera) + forward);
    vec3 right = normalize(cross(forward, bisector));
    
    float v = float(global_index) / float(camera.segment_count);
    float u_scaled = v * camera.uv_scale;
    
	uint vertices_per_segment = (camera.tessellation + 1) * 2;
	uint vertex_base_index = global_index * vertices_per_segment;
    if(camera.tessellation > 0) {
		// Calculate vertices per segment based on tessellation
		for (uint i = 0; i <= camera.tessellation; i++) {
			float t = float(i) / float(camera.tessellation);  // Interpolation factor
			float width_factor = mix(.5, 0, t);         // Interpolate from outer to inner
			
			uint vertex_index = vertex_base_index + i;
			vertex_data[vertex_index].position = vec4(current_pos + right * width * width_factor, 1.0);
			vertex_data[vertex_index].uv = vec4(t * 0.5, u_scaled + camera.uv_offset, 0., v * 3.);

			width_factor = mix(0, -0.5, t);           // Interpolate from inner to outer
			
			vertex_index = vertex_base_index + (camera.tessellation + 1) + i;
			vertex_data[vertex_index].position = vec4(current_pos + right * width * width_factor, 1.0);
			vertex_data[vertex_index].uv = vec4(0.5 + t * 0.5, u_scaled + camera.uv_offset, 1.0, v * 3.);
		}
    } else {
		vertex_data[vertex_base_index].position = vec4(current_pos + right * (width * 0.5), 1.0);
		vertex_data[vertex_base_index].uv = vec4(0.0, u_scaled + camera.uv_offset, 0., v * 3.);

		vertex_data[vertex_base_index + 1].position = vec4(current_pos - right * (width * 0.5), 1.0);
		vertex_data[vertex_base_index + 1].uv = vec4(1.0, u_scaled + camera.uv_offset, 1., v * 3.);
    }
}