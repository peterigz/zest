#version 450
#extension GL_EXT_nonuniform_qualifier : enable

// This shader convolves an environment cubemap into an irradiance map.

layout (local_size_x = 8, local_size_y = 8, local_size_z = 1) in;

// Generic sampler array
layout (set = 0, binding = 0) uniform sampler samplers[];
// Source environment maps (as separate textures)
layout (set = 0, binding = 2) uniform textureCube textureEnv[];
// Bindless array for the destination irradiance maps (as storage images)
layout (binding = 6, rgba16f) uniform writeonly imageCube imageIrradiance[];

layout(push_constant) uniform PushConsts {
	uint sourceEnvIndex;
	uint destIrradianceIndex;
	uint samplerIndex;
	float deltaPhi;
	float deltaTheta;
} consts;

#define PI 3.14159265358979323846

// Converts a pixel coordinate (on a cube face) into a 3D direction vector
vec3 getDirectionFromUV(uvec2 pixelCoords, uint faceIndex, vec2 size)
{
    // Map pixel coords to [-1, 1] Normalized Device Coordinate range
    vec2 uv = (vec2(pixelCoords) + 0.5) / size;
    vec2 ndc = uv * 2.0 - 1.0;

    switch (faceIndex) {
        case 0: return normalize(vec3( 1.0, -ndc.y, -ndc.x)); // +X
        case 1: return normalize(vec3(-1.0, -ndc.y,  ndc.x)); // -X
        case 2: return normalize(vec3( ndc.x,  1.0,  ndc.y)); // +Y
        case 3: return normalize(vec3( ndc.x, -1.0, -ndc.y)); // -Y
        case 4: return normalize(vec3( ndc.x, -ndc.y,  1.0)); // +Z
        case 5: return normalize(vec3(-ndc.x, -ndc.y, -1.0)); // -Z
    }
    return vec3(0.0);
}

void main()
{
    uvec3 pixel = gl_GlobalInvocationID;
    ivec2 size = imageSize(imageIrradiance[consts.destIrradianceIndex]);

    // Boundary check
    if (pixel.x >= size.x || pixel.y >= size.y) {
        return;
    }

    // Get the normal for the current pixel on the cubemap
    vec3 N = getDirectionFromUV(pixel.xy, pixel.z, vec2(size));

    // Create a coordinate system around the normal
    vec3 up = vec3(0.0, 1.0, 0.0);
    vec3 right = normalize(cross(up, N));
    up = cross(N, right);

    const float TWO_PI = PI * 2.0;
    const float HALF_PI = PI * 0.5;

    vec3 color = vec3(0.0);
    uint sampleCount = 0u;
    // Convolve the environment map by sampling over the hemisphere around N
    for (float phi = 0.0; phi < TWO_PI; phi += consts.deltaPhi) {
        for (float theta = 0.0; theta < HALF_PI; theta += consts.deltaTheta) {
            vec3 tempVec = cos(phi) * right + sin(phi) * up;
            vec3 sampleVector = cos(theta) * N + sin(theta) * tempVec;
            // Accumulate color, weighted by cos(theta) for Lambertian diffusion
            color += texture(samplerCube(textureEnv[consts.sourceEnvIndex], samplers[consts.samplerIndex]), sampleVector).rgb * cos(theta) * sin(theta);
            sampleCount++;
        }
    }
    
    vec4 outColor = vec4(PI * color / float(sampleCount), 1.0);
    // Store the final convoluted color in the destination irradiance map
    imageStore(imageIrradiance[consts.destIrradianceIndex], ivec3(pixel), outColor);
}