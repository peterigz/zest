#version 450
#extension GL_EXT_nonuniform_qualifier : enable
#extension GL_EXT_samplerless_texture_functions : require

// This shader pre-filters an environment cubemap for specular IBL by generating
// a mip-chain where each level corresponds to a different roughness.

layout (local_size_x = 8, local_size_y = 8, local_size_z = 1) in;

// Bindless array for the source environment maps
layout (binding = 0) uniform sampler samplers[];
layout (binding = 2) uniform textureCube textures[];
// Bindless array for the destination pre-filtered maps (we bind one mip level at a time)
layout (binding = 6, rgba16f) uniform writeonly imageCube destPrefilteredMaps[];

layout(push_constant) uniform PushConsts {
	uint sourceIndex;
	uint destIndex;
	uint sampler_index;
	uint skybox_sampler_index;
	float roughness;
	uint numSamples;
} consts;

const float PI = 3.14159265359;

// Based on http://byteblacksmith.com/improvements-to-the-canonical-one-liner-glsl-rand-for-opengl-es-2-0/
float random(vec2 co)
{
	float a = 12.9898;
	float b = 78.233;
	float c = 43758.5453;
	float dt= dot(co.xy ,vec2(a,b));
	float sn= mod(dt, PI);
	return fract(sin(sn) * c);
}

vec2 hammersley2d(uint i, uint N)
{
	// Radical inverse based on http://holger.dammertz.org/stuff/notes_HammersleyOnHemisphere.html
	uint bits = (i << 16u) | (i >> 16u);
	bits = ((bits & 0x55555555u) << 1u) | ((bits & 0xAAAAAAAAu) >> 1u);
	bits = ((bits & 0x33333333u) << 2u) | ((bits & 0xCCCCCCCCu) >> 2u);
	bits = ((bits & 0x0F0F0F0Fu) << 4u) | ((bits & 0xF0F0F0F0u) >> 4u);
	bits = ((bits & 0x00FF00FFu) << 8u) | ((bits & 0xFF00FF00u) >> 8u);
	float rdi = float(bits) * 2.3283064365386963e-10;
	return vec2(float(i) /float(N), rdi);
}

// Based on http://blog.selfshadow.com/publications/s2013-shading-course/karis/s2013_pbs_epic_slides.pdf
vec3 importanceSample_GGX(vec2 Xi, float roughness, vec3 normal)
{
	// Maps a 2D point to a hemisphere with spread based on roughness
	float alpha = roughness * roughness;
	float phi = 2.0 * PI * Xi.x + random(normal.xz) * 0.1;
	float cosTheta = sqrt((1.0 - Xi.y) / (1.0 + (alpha*alpha - 1.0) * Xi.y));
	float sinTheta = sqrt(1.0 - cosTheta * cosTheta);
	vec3 H = vec3(sinTheta * cos(phi), sinTheta * sin(phi), cosTheta);

	// Tangent space
	vec3 up = abs(normal.z) < 0.999 ? vec3(0.0, 0.0, 1.0) : vec3(1.0, 0.0, 0.0);
	vec3 tangentX = normalize(cross(up, normal));
	vec3 tangentY = normalize(cross(normal, tangentX));

	// Convert to world Space
	return normalize(tangentX * H.x + tangentY * H.y + normal * H.z);
}

// Normal Distribution function
float D_GGX(float dotNH, float roughness)
{
	float alpha = roughness * roughness;
	float alpha2 = alpha * alpha;
	float denom = dotNH * dotNH * (alpha2 - 1.0) + 1.0;
	return (alpha2)/(PI * denom*denom);
}

vec3 prefilterEnvMap(vec3 R, float roughness)
{
	vec3 N = R;
	vec3 V = R;
	vec3 color = vec3(0.0);
	float totalWeight = 0.0;
	float envMapDim = float(textureSize(textures[consts.sourceIndex], 0).s);
	for(uint i = 0u; i < consts.numSamples; i++) {
		vec2 Xi = hammersley2d(i, consts.numSamples);
		vec3 H = importanceSample_GGX(Xi, roughness, N);
		vec3 L = 2.0 * dot(V, H) * H - V;
		float dotNL = clamp(dot(N, L), 0.0, 1.0);
		if(dotNL > 0.0) {
			// Filtering based on https://placeholderart.wordpress.com/2015/07/28/implementation-notes-runtime-environment-map-filtering-for-image-based-lighting/

			float dotNH = clamp(dot(N, H), 0.0, 1.0);
			float dotVH = clamp(dot(V, H), 0.0, 1.0);

			// Probability Distribution Function
			float pdf = D_GGX(dotNH, roughness) * dotNH / (4.0 * dotVH) + 0.0001;
			// Solid angle of current sample
			float omegaS = 1.0 / (float(consts.numSamples) * pdf);
			// Solid angle of 1 pixel across all cube faces
			float omegaP = 4.0 * PI / (6.0 * envMapDim * envMapDim);
			// Biased (+1.0) mip level for better result
			float mipLevel = roughness == 0.0 ? 0.0 : max(0.5 * log2(omegaS / omegaP) + 1.0, 0.0f);
			color += textureLod(samplerCube(textures[consts.sourceIndex], samplers[consts.skybox_sampler_index]), L, mipLevel).rgb * dotNL;
			totalWeight += dotNL;

		}
	}
	return (totalWeight > 0.0) ? (color / totalWeight) : vec3(0.0);
}

// Converts a pixel coordinate (on a cube face) into a 3D direction vector
vec3 getDirectionFromUV(uvec2 pixelCoords, uint faceIndex, vec2 size)
{
    // Map pixel coords to [-1, 1] Normalized Device Coordinate range
    vec2 uv = (vec2(pixelCoords) + 0.5) / size;
    vec2 ndc = uv * 2.0 - 1.0;

    switch (faceIndex) {
        case 0: return normalize(vec3( 1.0, -ndc.y, -ndc.x)); // +X
        case 1: return normalize(vec3(-1.0, -ndc.y,  ndc.x)); // -X
        case 2: return normalize(vec3( ndc.x,  1.0,  ndc.y)); // +Y
        case 3: return normalize(vec3( ndc.x, -1.0, -ndc.y)); // -Y
        case 4: return normalize(vec3( ndc.x, -ndc.y,  1.0)); // +Z
        case 5: return normalize(vec3(-ndc.x, -ndc.y, -1.0)); // -Z
    }
    return vec3(0.0);
}

void main()
{
    uvec3 pixel = gl_GlobalInvocationID;
    ivec2 size = imageSize(destPrefilteredMaps[consts.destIndex]);

    // Boundary check
    if (pixel.x >= size.x || pixel.y >= size.y) {
        return;
    }

    // Get the reflection vector for the current pixel on the cubemap
    vec3 R = getDirectionFromUV(pixel.xy, pixel.z, vec2(size));

    vec4 outColor = vec4(prefilterEnvMap(R, consts.roughness), 1.0);

    // Store the final pre-filtered color in the destination cubemap
    imageStore(destPrefilteredMaps[consts.destIndex], ivec3(pixel), outColor);
}
