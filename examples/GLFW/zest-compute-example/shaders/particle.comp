#version 450
#extension GL_EXT_nonuniform_qualifier : require

// Define your basic Particle structure
struct Particle {
    vec2 pos;
    vec2 vel;
    vec4 gradientPos; // Assuming this is for color or some other attribute
};

// This is the structure of EACH buffer in your bindless array.
// It contains a member 'data' of type ParticleArrayHolder.
// The block name "PerParticleSystemSSBO" is used in the binding declaration.
layout(std140, set = 0, binding = 1) buffer PerParticleSystemSSBO {
    Particle data[]; // 'data' is the last member here - This is valid.
} u_particle_buffers_array[]; // This declares an array of SSBOs.
                              // Each element of this array is a descriptor pointing to a
                              // buffer structured like PerParticleSystemSSBO.

layout (local_size_x = 256) in;

layout (set = 1, binding = 0) uniform UBO 
{
	float deltaT;
	float destX;
	float destY;
	int particleCount;
	int particle_buffer_index;
} ubo;

vec2 attraction(vec2 pos, vec2 attractPos) 
{
    vec2 delta = attractPos - pos;
	const float damp = 0.5;
    float dDampedDot = dot(delta, delta) + damp;
    float invDist = 1.0f / sqrt(dDampedDot);
    float invDistCubed = invDist*invDist*invDist;
    return delta * invDistCubed * 0.0035;
}

vec2 repulsion(vec2 pos, vec2 attractPos)
{
	vec2 delta = attractPos - pos;
	float targetDistance = sqrt(dot(delta, delta));
	return delta * (1.0 / (targetDistance * targetDistance * targetDistance)) * -0.000035;
}

void main() 
{
    // Current SSBO index
    uint index = gl_GlobalInvocationID.x;
	// Don't try to write beyond particle count
    if (index >= ubo.particleCount) 
		return;	

    Particle p = u_particle_buffers_array[ubo.particle_buffer_index].data[index];

    // Read position and velocity
    vec2 vVel = p.vel;
    vec2 vPos = p.pos;

    vec2 destPos = vec2(ubo.destX, ubo.destY);

    vec2 delta = destPos - vPos;
    float targetDistance = sqrt(dot(delta, delta));
    vVel += repulsion(vPos, destPos.xy) * 0.05;

    // Move by velocity
    vPos += vVel * ubo.deltaT;

    // collide with boundary
    if ((vPos.x < -1.0) || (vPos.x > 1.0) || (vPos.y < -1.0) || (vPos.y > 1.0)) {
    	vVel = (-vVel * 0.1) + attraction(vPos, destPos) * 12;
    } else {
    	p.pos = vPos;
	}

    // Write back
    p.vel.xy = vVel;
	p.gradientPos.x += 0.02 * ubo.deltaT;
	if (p.gradientPos.x > 1.0) {
		p.gradientPos.x -= 1.0;
	}
    u_particle_buffers_array[ubo.particle_buffer_index].data[index] = p;
}

